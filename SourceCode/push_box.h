#ifndef PUSH_BOX_H_INCLUDED
#define PUSH_BOX_H_INCLUDED

/* the map of the game
 * realized by a matrix of "pixels"(actually 8*8)
 */
struct Pb_map;

/* write shp matrix in map structure
 * Parameters: the pointer to the map structure to be wrote, row and column of the position of the pixel wish to write, the shape of the pixel
 * Return Value: the value wrote in the shp matrix
 * because shp matrix records 8*16 pixels in a 8*8 matrix (compatible with LCD graph mode), a special function(this) is necessary to accomplish writing shp matrix
 */
unsigned char PbSetShp(struct Pb_map *M, unsigned char X, unsigned char Y, unsigned char PXshp);

/* get shp matrix in map structure
 * Parameters: the pointer to the map structure to be wrote, row and column of the position of the pixel wish to read
 * Return Value: contents of the shp
 */
unsigned char PbGetShp(const struct Pb_map *M, unsigned char X, unsigned char Y);

/* Initialize map structure
 * Parameters : the pointer to the map structure
 * Return Value : None
 */
const unsigned char PB_MAP_DATA[10][33]={   //0 stands for empty, 1 stands for block, 2 stands for box, 3 stands for destination
{0x00,0x05,0x40,0x00,   //map0  s1
 0x00,0x07,0x40,0x00,
 0x00,0x04,0x55,0x00,
 0x00,0x56,0x2D,0x00,
 0x00,0x72,0x15,0x00,
 0x00,0x55,0x90,0x00,
 0x00,0x01,0xD0,0x00,
 0x00,0x01,0x50,0x00,0x48
},
{0x00,0x55,0x54,0x00,   //map1 s3
 0x00,0x40,0x05,0x40,
 0x01,0x65,0x40,0x40,
 0x01,0x02,0x08,0x40,
 0x01,0x3D,0x21,0x00,
 0x01,0x7D,0x01,0x00,
 0x00,0x55,0x55,0x00,
 0x00,0x00,0x00,0x00,0x35
},
{0x00,0x05,0x55,0x00,   //map2 s10
 0x00,0x04,0x01,0x00,
 0x00,0x56,0xA1,0x00,
 0x00,0x42,0xF1,0x00,
 0x00,0x4B,0xF5,0x00,
 0x00,0x55,0x04,0x00,
 0x00,0x01,0x54,0x00,
 0x00,0x00,0x00,0x00,0x35
},
{0x00,0x55,0x54,0x00,   //map3 s20
 0x00,0x7E,0xF4,0x00,
 0x00,0x7D,0xF4,0x00,
 0x00,0x4A,0x84,0x00,
 0x00,0x42,0x04,0x00,
 0x00,0x4A,0x84,0x00,
 0x00,0x41,0x04,0x00,
 0x00,0x55,0x54,0x00,0x68
},
{0x00,0x55,0x55,0x00,   //map4 s29
 0x00,0x7F,0xFD,0x00,
 0x00,0x42,0x11,0x40,
 0x00,0x48,0x48,0x40,
 0x00,0x58,0x88,0x40,
 0x00,0x10,0x00,0x40,
 0x00,0x15,0x55,0x40,
 0x00,0x00,0x00,0x00,0x58
},
{0x00,0x01,0x55,0x40,   //map5 s31
 0x00,0x55,0xC0,0x40,
 0x00,0x42,0xA0,0x40,
 0x00,0x75,0xD7,0x40,
 0x00,0x40,0x80,0x40,
 0x00,0x42,0xD1,0x40,
 0x00,0x55,0x01,0x00,
 0x00,0x01,0x55,0x00,0x1B
},
{0x00,0x01,0x55,0x00,   //map6 s63
 0x00,0x55,0xC1,0x40,
 0x00,0x4B,0xB0,0x40,
 0x00,0x49,0x18,0x40,
 0x00,0x4B,0x30,0x40,
 0x00,0x55,0x98,0x40,
 0x00,0x07,0x30,0x40,
 0x00,0x05,0x55,0x40,0x35
},
{0x00,0x55,0x54,0x00,   //map7 src 68
 0x00,0x73,0x34,0x00,
 0x00,0x4A,0x84,0x00,
 0x00,0x78,0xB4,0x00,
 0x00,0x4A,0x84,0x00,
 0x00,0x73,0x34,0x00,
 0x00,0x55,0x54,0x00,
 0x00,0x00,0x00,0x00,0x37
},
{0x00,0x15,0x55,0x40,   //map8 s76
 0x05,0x50,0x0C,0x40,
 0x04,0x22,0x2C,0x40,
 0x04,0x35,0x5D,0x40,
 0x04,0xB8,0x81,0x00,
 0x04,0x30,0x55,0x00,
 0x05,0x55,0x40,0x00,
 0x00,0x00,0x00,0x00,0x2B
},
{0x00,0x00,0x00,0x00,   //map9 s91
 0x05,0x54,0x00,0x00,
 0x04,0x05,0x55,0x40,
 0x04,0x83,0xC8,0x40,
 0x05,0x83,0xE8,0x40,
 0x01,0x03,0xC8,0x40,
 0x01,0x55,0x55,0x40,
 0x00,0x00,0x00,0x00,0x3B
}
};

void PbIniMap(struct Pb_map *M,unsigned char level);

/* Write the sentence of level selection
 * Parameters : current level
 * Return Value : None
 * the function is called for 2 times currently so its defined
 */
void PbWriteLevel(unsigned char lvl);

/* Select level interface
 * Parameters : the level of the previous game
 * Return Value : selected level
 */
unsigned char PbSelectLevel(unsigned char prev_level);

/* the man tries to move
 * Parameters : the pointer to the map, two points: the destination, and the destination of destination
 * Return Value : selected level
 */
void PbPush(struct Pb_map* M,const struct Point p1,const struct Point p2);

/* Main function of PUSH BOX
 * Parameters : None
 * Return Value : None
 */
void PbMain();

/* interrupt sub function in different mode
 * Parameters : copy of value in ifg register
 * Return value: None
 */
void IntPbLs(unsigned char ifg);

void IntPbGm(unsigned char ifg);

void IntPbEnd(unsigned char ifg);

#endif // PUSH_BOX_H_INCLUDED

